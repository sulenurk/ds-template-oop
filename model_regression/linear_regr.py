{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea03974f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import utils.model_utils as mu\n",
    "import utils.shap_py as sp\n",
    "import joblib\n",
    "from typing import Dict\n",
    "\n",
    "# === 1. LEARN ===\n",
    "def learn_model(X, y, params=None, search=False, cv=5, scoring='neg_root_mean_squared_error', random_state=42):\n",
    "    \"\"\"Train Linear Regression (no hyperparameter tuning by default)\"\"\"\n",
    "    model = LinearRegression()\n",
    "\n",
    "    if params:\n",
    "        model.set_params(**params)\n",
    "\n",
    "    best_model = model.fit(X, y)\n",
    "    best_params = model.get_params()\n",
    "\n",
    "    return {\n",
    "        'model': best_model,\n",
    "        'model_params': best_params\n",
    "    }\n",
    "\n",
    "# === 2. APPLY ===\n",
    "def apply_model(X, model_info: Dict) -> pd.DataFrame:\n",
    "    \"\"\"Apply linear regression model and return predictions\"\"\"\n",
    "    model = model_info['model']\n",
    "    predictions = model.predict(X)\n",
    "\n",
    "    results = pd.DataFrame({\n",
    "        'predictions': predictions\n",
    "    }, index=pd.DataFrame(X).index)\n",
    "\n",
    "    return results\n",
    "\n",
    "# === 3. EVALUATE ===\n",
    "def evaluate_model(y_pred_df: pd.DataFrame, y_true: pd.Series):\n",
    "    \"\"\"Evaluate regression predictions with standard metrics\"\"\"\n",
    "    y_pred = y_pred_df['predictions']\n",
    "\n",
    "    rmse = mean_squared_error(y_true, y_pred, squared=False)\n",
    "    mae = mean_absolute_error(y_true, y_pred)\n",
    "    r2 = r2_score(y_true, y_pred)\n",
    "\n",
    "    print(\"═══ Regression Evaluation ═══\")\n",
    "    print(f\"RMSE: {rmse:.4f}\")\n",
    "    print(f\"MAE : {mae:.4f}\")\n",
    "    print(f\"R²  : {r2:.4f}\")\n",
    "\n",
    "    mu.plot_residuals(y_true, y_pred)\n",
    "\n",
    "# === 4. EXPLAIN ===\n",
    "def explain_model(model, X_train, X_test, top_n_features=10, sample_index=None, index_feature=False, save_path=None):\n",
    "    \"\"\"Use SHAP to explain a linear regression model\"\"\"\n",
    "    shap_vals = sp.shap_values(model, X_train, X_test, model_type='linear')\n",
    "\n",
    "    sp.global_analysis(shap_vals, X_test, top_n_features=top_n_features, save_path=save_path)\n",
    "\n",
    "    if sample_index is not None:\n",
    "        sp.index_charts(shap_vals, sample_index=sample_index, top_n_features=top_n_features, save_path=save_path)\n",
    "\n",
    "    if index_feature:\n",
    "        sp.index_feature(shap_vals, X_test, save_path=save_path)\n",
    "\n",
    "# === 5. SAVE ===\n",
    "def save_model(model_info: Dict, filepath: str):\n",
    "    \"\"\"Save trained model and metadata\"\"\"\n",
    "    joblib.dump(model_info, filepath)\n",
    "    print(f\"Model saved to {filepath}\")\n",
    "\n",
    "# === 6. LOAD ===\n",
    "def load_model(filepath: str) -> Dict:\n",
    "    \"\"\"Load model and metadata from file\"\"\"\n",
    "    model_info = joblib.load(filepath)\n",
    "    print(f\"Model loaded from {filepath}\")\n",
    "    return model_info\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
